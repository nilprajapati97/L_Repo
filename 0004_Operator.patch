2. Operators 
*****************************

1. Arithmetic Operators
======================================================

+
-
%
/

1.Unary arithmetic
	+X , -Y
	
Ex-:
#include <stdio.h>

int main()
{
    int a= -100,b=200; 
    printf("Hello World");
    printf("a=%d b=%d\n",-a,-b);

    return 0;
}
---------------
O/p = Hello Worlda=100 b=-200

  
	
	
2.Binary Arithmetic
   a+b, Sum
   a-b sub
	 a%b Modulo
	 a/b div
   a*b mul
	
	
2. Assignment Operators
======================================================	
	Assignment means we have to assign some value to another variable.
		b= a+b,
		int a=b=c=10;
	  =a+b   ==>> Note left side should be operator
#include <stdio.h>
int main()
{
    int a= 100,b=5 ,c=30; 
    printf("Hello World");
    c+=a;   // c= c+a = 30+100 new value of c is 130
    //c=+a;   // c= c+a = 30+100 new value of c is 130
    printf("a=%d b=%d c=%d\n",a,b,c);
    return 0;
}
3. Increment && Decrement Operator
========================================
  1. Pre Increment & Pre Decrement
  2. Post Increment & Post decerement
  
  Ex -: 
     int a= 100,b=5 ,c=30; 
    //pre -: it do operation(incre && decre and than assigne)
    //post -:It will assign 1st and than  it do operation(incre && decre and than assigne)
                            
  printf(" %d  %d  %d\n",c++,c++,++c);
					predict= 32(+1)31(+1),31
          output = 32  	31    33
          final C =33 
          c =33 
          c =31;

 printf(" %d  %d  %d\n",c++,++c,++c);
 Predict=        32   32 31  final c is 33
 Actual = 		32  33  33	  final c is 33

Code Optimization -: 
       If post incre/decre  is there than lateast value of operator will update at the end.
Excersise -:
how code optimization effects pre increm.decre operators modification in c
			
4. relational operator
=================================================
  <  less than
  <= less than equal to
  != not equal too
  == Equal too 
  > greater than
  > = greator than equal too
  
  if relation is true than it will give result as True(1) = NON Zero
  if relation is true false it will give result as False(0) = Zero Value
  
Ex =
  
#include <stdio.h>
int main()
{
    int a= 100,b=5 ,c=30; 
    printf("Hello World");
    printf(" %d  %d  %d\n", a<b ,b!=c ,c==30);
    //      0   1    1            
    return 0;
}
===================================================================================
